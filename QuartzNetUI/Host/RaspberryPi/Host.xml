<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Host</name>
    </assembly>
    <members>
        <member name="F:Host.Common.Constant.REQUESTURL">
            <summary>
            请求url RequestUrl
            </summary>
        </member>
        <member name="F:Host.Common.Constant.REQUESTPARAMETERS">
            <summary>
            请求参数 RequestParameters
            </summary>
        </member>
        <member name="F:Host.Common.Constant.HEADERS">
            <summary>
            Headers（可以包含：Authorization授权认证）
            </summary>
        </member>
        <member name="F:Host.Common.Constant.MAILMESSAGE">
            <summary>
            是否发送邮件
            </summary>
        </member>
        <member name="F:Host.Common.Constant.REQUESTTYPE">
            <summary>
            请求类型 RequestType
            </summary>
        </member>
        <member name="F:Host.Common.Constant.LOGLIST">
            <summary>
            日志 LogList
            </summary>
        </member>
        <member name="F:Host.Common.Constant.EXCEPTION">
            <summary>
            异常 Exception
            </summary>
        </member>
        <member name="T:Host.HttpHelper">
            <summary>
            请求帮助类
            </summary>
        </member>
        <member name="F:Host.HttpHelper.dictionary">
            <summary>
            不同url分配不同HttpClient
            </summary>
        </member>
        <member name="M:Host.HttpHelper.PostAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post请求
            </summary>
            <param name="url">url地址</param>
            <param name="jsonString">请求参数（Json字符串）</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Host.HttpHelper.PostAsync``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Post请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">url地址</param>
            <param name="content">请求参数</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Host.HttpHelper.GetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Get请求
            </summary>
            <param name="url">url地址</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Host.HttpHelper.PutAsync(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Put请求
            </summary>
            <param name="url">url地址</param>
            <param name="jsonString">请求参数（Json字符串）</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Host.HttpHelper.PutAsync``1(System.String,``0,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Put请求
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url">url地址</param>
            <param name="content">请求参数</param>
            <param name="headers">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="M:Host.HttpHelper.DeleteAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Delete请求
            </summary>
            <param name="url">url地址</param>
            <param name="authorization">webapi做用户认证</param>
            <returns></returns>
        </member>
        <member name="T:Host.Controllers.JobController">
            <summary>
            任务调度
            </summary>
        </member>
        <member name="M:Host.Controllers.JobController.AddJob(Host.ScheduleEntity)">
            <summary>
            添加任务
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.StopJob(Quartz.JobKey)">
            <summary>
            暂停任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.RemoveJob(Quartz.JobKey)">
            <summary>
            删除任务
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.ResumeJob(Quartz.JobKey)">
            <summary>
            恢复运行暂停的任务
            </summary> 
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.QueryJob(Quartz.JobKey)">
            <summary>
            查询任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.ModifyJob(Host.ScheduleEntity)">
            <summary>
            修改
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.TriggerJob(Quartz.JobKey)">
            <summary>
            立即执行
            </summary>
            <param name="jobGroup"></param>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.GetJobLogs(Quartz.JobKey)">
            <summary>
            获取job日志
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.StartSchedule">
            <summary>
            启动调度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.StopSchedule">
            <summary>
            停止调度
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.GetAllJob">
            <summary>
            获取所有任务
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.GetAllJobBriefInfo">
            <summary>
            获取所有Job信息（简要信息 - 刷新数据的时候使用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.JobController.RemoveErrLog(Quartz.JobKey)">
            <summary>
            移除异常信息
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.SetingController.SaveMailInfo(Host.Entity.MailEntity)">
            <summary>
            保存Mail信息
            </summary>
            <param name="mailEntity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.SetingController.SaveRefreshInterval(Host.Entity.RefreshIntervalEntity)">
            <summary>
            保存刷新间隔
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.SetingController.GetRefreshInterval">
            <summary>
            获取
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.SetingController.GetMailInfo">
            <summary>
            获取eMail信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.Controllers.SetingController.SendMail(Host.Model.SendMailModel)">
            <summary>
            发送邮件
            </summary>
            <param name="title"></param>
            <param name="msg"></param>
            <param name="mail"></param>
            <returns></returns>
        </member>
        <member name="P:Host.Entity.JobBriefInfoEntity.GroupName">
            <summary>
            任务组名
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfoEntity.JobInfoList">
            <summary>
            任务信息
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.NextFireTime">
            <summary>
            下次执行时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.PreviousFireTime">
            <summary>
            上次执行时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.LastErrMsg">
            <summary>
            上次执行的异常信息
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.TriggerState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Host.Entity.JobBriefInfo.DisplayState">
            <summary>
            显示状态
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfoEntity.GroupName">
            <summary>
            任务组名
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfoEntity.JobInfoList">
            <summary>
            任务信息
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.Name">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.NextFireTime">
            <summary>
            下次执行时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.PreviousFireTime">
            <summary>
            上次执行时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.LastErrMsg">
            <summary>
            上次执行的异常信息
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.TriggerState">
            <summary>
            任务状态
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.DisplayState">
            <summary>
            显示状态
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.Interval">
            <summary>
            时间间隔
            </summary>
        </member>
        <member name="P:Host.Entity.JobInfo.RequestUrl">
            <summary>
            请求API的地址
            </summary>
        </member>
        <member name="P:Host.Entity.MailEntity.MailFrom">
            <summary>
            发件邮箱
            </summary>
        </member>
        <member name="P:Host.Entity.MailEntity.MailPwd">
            <summary>
            邮箱密码
            </summary>
        </member>
        <member name="P:Host.Entity.MailEntity.MailHost">
            <summary>
            发件服务器
            </summary>
        </member>
        <member name="P:Host.Entity.MailEntity.MailTo">
            <summary>
            收件邮箱
            </summary>
        </member>
        <member name="P:Host.Entity.RefreshIntervalEntity.IntervalTime">
            <summary>
            间隔时间
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.JobName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.JobGroup">
            <summary>
            任务分组
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.BeginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.Cron">
            <summary>
            Cron表达式
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.RunTimes">
            <summary>
            执行次数（默认无限循环）
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.IntervalSecond">
            <summary>
            执行间隔时间，单位秒（如果有Cron，则IntervalSecond失效）
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.TriggerType">
            <summary>
            触发器类型
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.RequestUrl">
            <summary>
            请求url
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.RequestParameters">
            <summary>
            请求参数（Post，Put请求用）
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.Headers">
            <summary>
            Headers(可以包含如：Authorization授权认证)
            格式：{"Authorization":"userpassword.."}
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:Host.ScheduleEntity.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:Host.Model.HttpResultModel">
            <summary>
            Job任务结果
            </summary>
        </member>
        <member name="P:Host.Model.HttpResultModel.IsSuccess">
            <summary>
            请求是否成功
            </summary>
        </member>
        <member name="P:Host.Model.HttpResultModel.ErrorMsg">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.BeginTime">
            <summary>
            开始执行时间
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.EndTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.Seconds">
            <summary>
            耗时（秒）
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.JobName">
            <summary>
            任务名称
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.Url">
            <summary>
            请求地址
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.RequestType">
            <summary>
            请求类型
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.Parameters">
            <summary>
            请求参数
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.Result">
            <summary>
            请求结果
            </summary>
        </member>
        <member name="P:Host.Model.LogInfoModel.ErrorMsg">
            <summary>
            异常消息
            </summary>
        </member>
        <member name="T:Host.SchedulerCenter">
            <summary>
            调度中心
            </summary>
        </member>
        <member name="F:Host.SchedulerCenter.Instance">
            <summary>
            任务调度对象
            </summary>
        </member>
        <member name="P:Host.SchedulerCenter.Scheduler">
            <summary>
            返回任务计划（调度器）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.AddScheduleJobAsync(Host.ScheduleEntity)">
            <summary>
            添加一个工作调度
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.StopOrDelScheduleJobAsync(System.String,System.String,System.Boolean)">
            <summary>
            暂停/删除 指定的计划
            </summary>
            <param name="jobGroup">任务分组</param>
            <param name="jobName">任务名称</param>
            <param name="isDelete">停止并删除任务</param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.ResumeJobAsync(System.String,System.String)">
            <summary>
            恢复运行暂停的任务
            </summary>
            <param name="jobName">任务名称</param>
            <param name="jobGroup">任务分组</param>
        </member>
        <member name="M:Host.SchedulerCenter.QueryJobAsync(System.String,System.String)">
            <summary>
            查询任务
            </summary>
            <param name="jobGroup"></param>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.TriggerJobAsync(Quartz.JobKey)">
            <summary>
            立即执行
            </summary>
            <param name="jobGroup"></param>
            <param name="jobName"></param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.GetJobLogsAsync(Quartz.JobKey)">
            <summary>
            获取job日志
            </summary>
            <param name="jobKey"></param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.GetAllJobAsync">
            <summary>
            获取所有Job（详情信息 - 初始化页面调用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.RemoveErrLog(System.String,System.String)">
            <summary>
            移除异常信息
            因为只能在IJob持久化操作JobDataMap，所有这里直接暴力操作数据库。
            </summary>
            <param name="jobGroup"></param>
            <param name="jobName"></param>
            <returns></returns>          
        </member>
        <member name="M:Host.SchedulerCenter.GetAllJobBriefInfoAsync">
            <summary>
            获取所有Job信息（简要信息 - 刷新数据的时候使用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.StartScheduleAsync">
            <summary>
            开启调度器
            </summary>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.StopScheduleAsync">
            <summary>
            停止任务调度
            </summary>
        </member>
        <member name="M:Host.SchedulerCenter.CreateSimpleTrigger(Host.ScheduleEntity)">
            <summary>
            创建类型Simple的触发器
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.SchedulerCenter.CreateCronTrigger(Host.ScheduleEntity)">
            <summary>
            创建类型Cron的触发器
            </summary>
            <param name="entity"></param>
            <returns></returns>
        </member>
        <member name="M:Host.Startup.LogConfig">
            <summary>
            日志配置
            </summary>      
        </member>
    </members>
</doc>
